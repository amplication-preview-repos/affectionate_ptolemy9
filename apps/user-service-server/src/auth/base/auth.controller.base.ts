/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { AuthService } from "../auth.service";
import { AuthCreateInput } from "./AuthCreateInput";
import { Auth } from "./Auth";
import { AuthFindManyArgs } from "./AuthFindManyArgs";
import { AuthWhereUniqueInput } from "./AuthWhereUniqueInput";
import { AuthUpdateInput } from "./AuthUpdateInput";

export class AuthControllerBase {
  constructor(protected readonly service: AuthService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: Auth })
  async createAuth(@common.Body() data: AuthCreateInput): Promise<Auth> {
    return await this.service.createAuth({
      data: {
        ...data,

        user: data.user
          ? {
              connect: data.user,
            }
          : undefined,
      },
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        expiresAt: true,
        token: true,

        user: {
          select: {
            id: true,
          },
        },
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [Auth] })
  @ApiNestedQuery(AuthFindManyArgs)
  async auths(@common.Req() request: Request): Promise<Auth[]> {
    const args = plainToClass(AuthFindManyArgs, request.query);
    return this.service.auths({
      ...args,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        expiresAt: true,
        token: true,

        user: {
          select: {
            id: true,
          },
        },
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: Auth })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async auth(
    @common.Param() params: AuthWhereUniqueInput
  ): Promise<Auth | null> {
    const result = await this.service.auth({
      where: params,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        expiresAt: true,
        token: true,

        user: {
          select: {
            id: true,
          },
        },
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: Auth })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateAuth(
    @common.Param() params: AuthWhereUniqueInput,
    @common.Body() data: AuthUpdateInput
  ): Promise<Auth | null> {
    try {
      return await this.service.updateAuth({
        where: params,
        data: {
          ...data,

          user: data.user
            ? {
                connect: data.user,
              }
            : undefined,
        },
        select: {
          id: true,
          createdAt: true,
          updatedAt: true,
          expiresAt: true,
          token: true,

          user: {
            select: {
              id: true,
            },
          },
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: Auth })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteAuth(
    @common.Param() params: AuthWhereUniqueInput
  ): Promise<Auth | null> {
    try {
      return await this.service.deleteAuth({
        where: params,
        select: {
          id: true,
          createdAt: true,
          updatedAt: true,
          expiresAt: true,
          token: true,

          user: {
            select: {
              id: true,
            },
          },
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
